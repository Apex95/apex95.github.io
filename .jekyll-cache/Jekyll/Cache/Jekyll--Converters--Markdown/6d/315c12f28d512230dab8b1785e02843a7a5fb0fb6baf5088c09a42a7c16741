I"{(<p>This article presents a method of loading a <strong>managed (C#) dll</strong> in a <strong>native (C++) process</strong> by using the <strong>Common Language Runtime (CLR)</strong>. Basically, it refers to calling a <strong>C# method</strong> from <strong>C/C++</strong> and enables calling managed code from native applications. This method was tested on the <strong>.Net Framework 4.0</strong>.</p>

<p>The trick consists in creating and hosting a <strong>CLR</strong> instance in the C++ process and then using it to load a managed dll.</p>

<h2 id="hosting-the-clr-in-a-native-process">Hosting the CLR in a Native Process</h2>

<p>The following dependencies will be required</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;metahost.h&gt;
#pragma comment(lib, "mscoree.lib")
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="highlighter-rouge">CLRCreateInstance()</code> needs to be called in order to gain access to the <code class="highlighter-rouge">ICLRMetaHost</code> interface. This interface contains various methods that will provide general information about the current .NET Framework runtime.</p>

<p>From there, it is required to focus on one version of the framework (I’m working with <strong>v4.0.30319</strong>) - calling <code class="highlighter-rouge">ICLRMetaHost::GetRuntime()</code> will return a pointer to another interface (<code class="highlighter-rouge">ICLRRuntimeInfo</code>), which contains… more methods. (this is the upgraded version of <code class="highlighter-rouge">ICorRuntimeHost</code>).</p>

<p>The next step is calling <code class="highlighter-rouge">ICLRRuntimeInfo::GetInterface()</code> which returns an instance of the <code class="highlighter-rouge">ICLRRuntimeHost</code>. The <code class="highlighter-rouge">ICLRRuntimeHost</code> needs to be started (<code class="highlighter-rouge">ICLRRuntimeHost::Start()</code>) in the current native process and can be used to execute managed code through <code class="highlighter-rouge">ICLRRuntimeHost::ExecuteInDefaultAppDomain()</code>. The aforementioned method has the following prototype:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="n">HRESULT</span> <span class="nf">ExecuteInDefaultAppDomain</span> <span class="p">(</span>
    <span class="p">[</span><span class="n">in</span><span class="p">]</span> <span class="n">LPCWSTR</span> <span class="n">pwzAssemblyPath</span><span class="p">,</span>  <span class="c1">// absolute path to the managed dll (not relative!)</span>
    <span class="p">[</span><span class="n">in</span><span class="p">]</span> <span class="n">LPCWSTR</span> <span class="n">pwzTypeName</span><span class="p">,</span>  <span class="c1">// name of the class for example: dllNamespace.dllClass</span>
    <span class="p">[</span><span class="n">in</span><span class="p">]</span> <span class="n">LPCWSTR</span> <span class="n">pwzMethodName</span><span class="p">,</span>  <span class="c1">// name of the method </span>
    <span class="p">[</span><span class="n">in</span><span class="p">]</span> <span class="n">LPCWSTR</span> <span class="n">pwzArgument</span><span class="p">,</span>   <span class="c1">// argument(s)</span>
    <span class="p">[</span><span class="n">out</span><span class="p">]</span> <span class="n">DWORD</span> <span class="o">*</span><span class="n">pReturnValue</span>   <span class="c1">// this is what the method returns</span>
<span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It is advised to always check if each call of the above methods returns a <code class="highlighter-rouge">S_OK</code>.</p>

<h2 id="example-dummy-managed-dll">Example: Dummy Managed DLL</h2>

<p>This part implements a dummy managed DLL that will be attached to the native application. In this version, I’m implementing a method which displays a <code class="highlighter-rouge">MessageBox</code> that contains a message (<code class="highlighter-rouge">string</code>) given as parameter; the returned <code class="highlighter-rouge">int</code> will also be available in the native code. This method will be called by the C process.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">using</span> <span class="nn">System.Windows.Forms</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">dllNamespace</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">dllClass</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">ShowMsg</span><span class="p">(</span><span class="kt">string</span> <span class="n">msg</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">MessageBox</span><span class="p">.</span><span class="nf">Show</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
            <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="example-native-application">Example: Native Application</h2>

<p>I’ve implemented a loader for the previously presented DLL.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="cp">#include &lt;metahost.h&gt;
#pragma comment(lib, "mscoree.lib")
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">ICLRMetaHost</span><span class="o">*</span> <span class="n">metaHost</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">ICLRRuntimeInfo</span><span class="o">*</span> <span class="n">runtimeInfo</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">ICLRRuntimeHost</span><span class="o">*</span> <span class="n">runtimeHost</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">CLRCreateInstance</span><span class="p">(</span><span class="n">CLSID_CLRMetaHost</span><span class="p">,</span> <span class="n">IID_ICLRMetaHost</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">metaHost</span><span class="p">)</span> <span class="o">==</span> <span class="n">S_OK</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">metaHost</span><span class="o">-&gt;</span><span class="n">GetRuntime</span><span class="p">(</span><span class="s">L"v4.0.30319"</span><span class="p">,</span> <span class="n">IID_ICLRRuntimeInfo</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">runtimeInfo</span><span class="p">)</span> <span class="o">==</span> <span class="n">S_OK</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">runtimeInfo</span><span class="o">-&gt;</span><span class="n">GetInterface</span><span class="p">(</span><span class="n">CLSID_CLRRuntimeHost</span><span class="p">,</span> <span class="n">IID_ICLRRuntimeHost</span><span class="p">,</span> <span class="p">(</span><span class="n">LPVOID</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">runtimeHost</span><span class="p">)</span> <span class="o">==</span> <span class="n">S_OK</span><span class="p">)</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">runtimeHost</span><span class="o">-&gt;</span><span class="n">Start</span><span class="p">()</span> <span class="o">==</span> <span class="n">S_OK</span><span class="p">)</span>
	            <span class="p">{</span>		
                    <span class="n">DWORD</span> <span class="n">pReturnValue</span><span class="p">;</span>
                    <span class="n">runtimeHost</span><span class="o">-&gt;</span><span class="n">ExecuteInDefaultAppDomain</span><span class="p">(</span><span class="s">L"C:</span><span class="se">\\</span><span class="s">random.dll"</span><span class="p">,</span> <span class="s">L"dllNamespace.dllClass"</span><span class="p">,</span> <span class="s">L"ShowMsg"</span><span class="p">,</span> <span class="s">L"It works!!"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pReturnValue</span><span class="p">);</span>

                    <span class="n">runtimeInfo</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
                    <span class="n">metaHost</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
                    <span class="n">runtimeHost</span><span class="o">-&gt;</span><span class="n">Release</span><span class="p">();</span>
                <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>P.S.:</strong> due to some problems with my compiler, I couldn’t test this code properly - last time, it worked pretty well…hope it still does so.</p>
:ET