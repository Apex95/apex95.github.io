I"ñ!<p>This is a method used to import a <strong>dll</strong> during the programâ€™s execution (at the <strong>runtime</strong>) without adding the actual library as a reference.</p>

<p>Obviously, you will need:</p>
<ul>
  <li>A DLL made in C# - only a function and a class</li>
  <li>An executable - preferably a <strong>Console project</strong></li>
</ul>

<p>In this tutorial I work with my own examples, I recommend using them too because it makes everything easier to understand.</p>

<h2 id="1-the-dll--library">1. The Dll / library</h2>

<p>Shall consist of a simple class that contains a function which performs the sum of two variables (a and b) passed as parameters.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">testdll</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Class1</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">a</span> <span class="p">+</span> <span class="n">b</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>What you should know:</p>
<ul>
  <li>the <strong>Type</strong> of the dll is written as this: <strong>namespace.class</strong>. Therefore our dll will have the following type: <strong>testdll.Class1</strong>.</li>
</ul>

<h2 id="2-main-program">2. Main Program</h2>

<p>Start by copying the library we just made in the main programâ€™s folder. (where the executable is found).<br />
Loading the DLL can be done using the following code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="n">Assembly</span> <span class="n">assembly</span> <span class="p">=</span> <span class="n">Assembly</span><span class="p">.</span><span class="nf">LoadFrom</span> <span class="p">(</span><span class="s">"testdll.dll"</span><span class="p">);</span>
<span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="n">assembly</span><span class="p">.</span><span class="nf">GetType</span><span class="p">(</span><span class="s">"testdll.Class1"</span><span class="p">);</span> 
<span class="kt">object</span> <span class="n">instance</span><span class="p">=</span> <span class="n">Activator</span><span class="p">.</span><span class="nf">CreateInstance</span><span class="p">(</span><span class="n">type</span><span class="p">);</span> <span class="c1">//creates an instance of that class </span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li><strong>type</strong> contains all the information about our program (variables, functions, and many others)</li>
  <li><strong>instance</strong> makes a connection between our library/class and the main program - we use this to call the method from the dll.</li>
</ul>

<p>Next we import the method <strong>sum</strong> in a <strong>MethodInfo Array</strong>, and call it using <strong>Invoke(instance, arguments_array)</strong> and store the result.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="n">MethodInfo</span><span class="p">[]</span> <span class="n">methods</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetMethods</span><span class="p">()</span> <span class="c1">//takes all methods found in the dll in this array
</span>

<span class="c1">//Having only one method in the dll, we simply call  the first element
</span>
<span class="kt">object</span> <span class="n">result</span> <span class="p">=</span> <span class="n">methods</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="nf">Invoke</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="k">new</span> <span class="kt">object</span> <span class="p">[]</span> <span class="p">{</span><span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">})</span> 

<span class="c1">//arguments passed to  'sum' are 5 and 3  -&gt; sum(5, 3)
</span>
<span class="c1">//'result' will store the value returned (8);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Finally, you get something like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">test</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span> <span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Assembly</span> <span class="n">myassembly</span> <span class="p">=</span> <span class="n">Assembly</span><span class="p">.</span><span class="nf">LoadFrom</span><span class="p">(</span><span class="s">"testdll.dll"</span><span class="p">);</span>
            <span class="n">Type</span> <span class="n">type</span> <span class="p">=</span> <span class="n">myassembly</span><span class="p">.</span><span class="nf">GetType</span><span class="p">(</span><span class="s">"testdll.Class1"</span><span class="p">);</span>

            <span class="kt">object</span> <span class="n">instance</span> <span class="p">=</span> <span class="n">Activator</span><span class="p">.</span><span class="nf">Createinstance</span><span class="p">(</span><span class="n">type</span><span class="p">);</span>

            <span class="n">MethodInfo</span><span class="p">[]</span> <span class="n">methods</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetMethods</span><span class="p">();</span>
            <span class="kt">object</span> <span class="n">res</span> <span class="p">=</span> <span class="n">methods</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="nf">Invoke</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="k">new</span> <span class="kt">object</span><span class="p">[]</span> <span class="p">{</span><span class="m">5</span><span class="p">,</span> <span class="m">3</span><span class="p">});</span>

            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>
:ET