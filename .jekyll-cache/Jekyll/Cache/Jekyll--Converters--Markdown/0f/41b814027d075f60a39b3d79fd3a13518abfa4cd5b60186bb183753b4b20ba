I"«)<p>To our luck, <strong>.NET Framework</strong> contains some classes that allow us to access the compiler and with it, we can <strong>compile our code at runtime</strong>.</p>

<p>Basically when our executable will run, it will compile a small piece of code stored in a string and saves the result as a new executable file.</p>

<h2 id="1-the-code-we-want-to-compile-at-runtime">1. The code we want to compile at Runtime</h2>

<p>First, write the code of a small valid C# application (preferable Console Project), that weâ€™ll compile at Runtime.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">namespace</span> <span class="nn">Hello</span>
<span class="p">{</span>
  <span class="k">class</span> <span class="nc">Program</span>
  <span class="p">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
     <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Hello World!"</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">();</span>
     <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="2-writing-the-compiler">2. Writing the â€˜compilerâ€™</h2>

<p>Create a new application, and make sure you include these 2 lines:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">Microsoft.CSharp</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.CodeDom.Compiler</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then, create a <strong>CSharpCodeProvider</strong> object - this will give us access to the .NET Compiler.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">CSharpCodeProvider</span> <span class="n">provider</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CSharpCodeProvider</span><span class="p">();</span>  
<span class="n">ICodeCompiler</span> <span class="n">compiler</span> <span class="p">=</span> <span class="n">provider</span><span class="p">.</span><span class="nf">CreateCompiler</span><span class="p">();</span>  <span class="c1">//the compiler, created from CSharpCodeProvider</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>It remains to adjust the compilerâ€™s settings, this can be done by providing some parameters:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="n">CompilerParameters</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CompilerParameters</span><span class="p">();</span>

<span class="n">parameters</span><span class="p">.</span><span class="n">GenerateExecutable</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>  <span class="c1">// we want to save it as an .exe
</span>
<span class="n">parameters</span><span class="p">.</span><span class="n">GenerateInMemory</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>  <span class="c1">// it must be saved on the harddisk, not in memory
</span>
<span class="n">parameters</span><span class="p">.</span><span class="n">OutputAssembly</span> <span class="p">=</span> <span class="s">"hello.exe"</span><span class="p">;</span> <span class="c1">// the file's name
</span>
<span class="n">parameters</span><span class="p">.</span><span class="n">TreatWarningsAsErrors</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span> <span class="c1">// ignoring the warnings - my favourite one :)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now the compilerâ€™s done.</p>

<h2 id="3-compiling-the-code">3. Compiling the code</h2>

<p>In the end, use a <strong>string</strong> to store the code you want to compile at Runtime, in this case, Iâ€™ll compile the â€˜Hello Worldâ€™ code written at the beginning of the tutorial.</p>

<p>Be sure to escape any quotation mark from the code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="kt">string</span> <span class="n">code</span> <span class="p">=</span> <span class="s">"using System; using System.Text; namespace Hello { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World\"); Console.ReadLine(); } } }"</span><span class="p">;</span>

<span class="n">CompilerResults</span> <span class="n">result</span> <span class="p">=</span> <span class="n">compiler</span><span class="p">.</span><span class="nf">CompileAssemblyFromSource</span><span class="p">(</span><span class="n">parameters</span><span class="p">,</span> <span class="n">code</span><span class="p">);</span>  
<span class="c1">//compiling the code using the given parameters
</span>

<span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>   <span class="c1">//if there are any compiling errors
</span>
<span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="n">CompilerError</span> <span class="n">er</span> <span class="k">in</span> <span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">)</span>
    <span class="p">{</span>
          <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">er</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>  <span class="c1">//we show them
</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="4-the-whole-program">4. The whole program</h2>

<p>This is how your compiler should look like, if you carefully followed the steps:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">CSharpCodeProvider</span> <span class="n">provider</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CSharpCodeProvider</span><span class="p">();</span>
    <span class="n">ICodeCompiler</span> <span class="n">compiler</span> <span class="p">=</span> <span class="n">provider</span><span class="p">.</span><span class="nf">CreateCompiler</span><span class="p">();</span>

    <span class="n">CompilerParameters</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CompilerParameters</span><span class="p">();</span>

    <span class="n">parameters</span><span class="p">.</span><span class="n">GenerateExecutable</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="n">parameters</span><span class="p">.</span><span class="n">GenerateInMemory</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="n">parameters</span><span class="p">.</span><span class="n">OutputAssembly</span> <span class="p">=</span> <span class="s">"hello.exe"</span><span class="p">;</span>
    <span class="n">parameters</span><span class="p">.</span><span class="n">TreatWarningsAsErrors</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="kt">string</span> <span class="n">code</span> <span class="p">=</span> <span class="s">"using System; using System.Text; namespace Hello { class Program { static void Main(string[] args) { Console.WriteLine(\"Hello World\"); Console.ReadLine(); } } }"</span><span class="p">;</span>

    <span class="n">CompilerResults</span> <span class="n">result</span> <span class="p">=</span> <span class="n">compiler</span><span class="p">.</span><span class="nf">CompileAssemblyFromSource</span><span class="p">(</span><span class="n">parameters</span><span class="p">,</span> <span class="n">code</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">.</span><span class="n">Count</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">CompilerError</span> <span class="n">er</span> <span class="k">in</span> <span class="n">result</span><span class="p">.</span><span class="n">Errors</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">er</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>
:ET