I"½4<p>Soâ€¦ one of my current projects required the following actions: asymmetrically <strong>encrypt</strong> a string in <strong>.NET</strong> using a public key and <strong>decrypt</strong> it in a <strong>python</strong> script using a private key.</p>

<p>The problem that Iâ€™ve encountered was that, apparently, I couldnâ€™t achieve compatibility between the two exposed classes: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider?view=netframework-4.8"><code class="highlighter-rouge">RSACryptoServiceProvider</code></a> and <a href="https://pycryptodome.readthedocs.io/en/latest/src/cipher/pkcs1_v1_5.html"><code class="highlighter-rouge">PKCS1_v1_5</code></a>. To be more specific, the python script couldnâ€™t decrypt the ciphertext even though proper configurations were made and the provided keys were compatible. Additionally, separate encryption-decryption actions worked inside .NET and python but not in-between them.</p>

<p>I wasnâ€™t able to find too much information about this specific problem in the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsaparameters?view=netframework-4.8"><code class="highlighter-rouge">RSAParameters</code></a> documentation, hence this post.</p>

<h2 id="solution">Solution</h2>

<p>Alright, the issue seems to be caused by a difference in <strong>endianness</strong> between the two classes, when the RSA parameters are provided. <code class="highlighter-rouge">PKCS1_v1_5</code> uses <strong>little endian</strong> and <code class="highlighter-rouge">RSACryptoServiceProvider</code> prefers <strong>big endian</strong>. In my case, this made the encryption method use a different key than the one I though I specified. Nevertheless, it was more fun to debug because of PKCS which always ensured different ciphertexts.</p>

<p>I fixed this by <strong>base64</strong>-encoding the <strong>exponent</strong> and <strong>modulus</strong> in <strong>big-endian</strong> format (in python) and then loading them with <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsa.fromxmlstring?view=netframework-4.8"><code class="highlighter-rouge">RSACryptoServiceProvider.FromXmlString()</code></a> (in .NET).</p>

<h2 id="working-example">Working Example</h2>

<p>I hardcoded the <code class="highlighter-rouge">(N, E, D)</code> parameters for a private key in python and exported the <strong>exponent</strong> and <strong>modulus</strong> to be used later for encryption.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="c1"># custom base64 encoding
</span><span class="k">def</span> <span class="nf">b64_enc</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">l</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

<span class="c1"># fixed a set of keys for testing purposes
</span><span class="n">N</span> <span class="o">=</span> <span class="mi">26004126751443262055682011081007404548850063543219588539086190001742195632834884763548378850634989264309169823030784372770378521274048211537270851954737597964394738860810397764157069391719551179298507244962912383723776384386127059976543327113777072990654810746825378287761304202032439750301912045623786736128233730798303406858144431081065384988539277630625160727011582345942687126935423502995613920211095965452425548919926951203151483590222152446516520421379279591807660810550784744188433550335950652666201439521115515355539373928576162221297645781251953236644092963307595988040539993067709240004782161131243282208593</span>
<span class="n">E</span> <span class="o">=</span> <span class="mi">65537</span>
<span class="n">D</span> <span class="o">=</span> <span class="mi">844954574014654722486150458473919587206863455991060222377955072839922571984098861772377020041002939383041291761051853484512886782322743892284027026528735139923685801975918062144627908962369108081178131103781404720078456605432924519279933702927938064507063482999903002331319671303661755165294744970869186178561527578261522199503340027952798084625109041630166309505066404215223685733585467434168146932177924040219720383860880583466676764286302300281603021045351842170755190359364339936360197909582974922675680101321863304283607829144759777189360340512230537108705852116021758740440195445732631657876008160876867027543</span>

<span class="c1"># construct pair of keys
</span><span class="n">private_key</span> <span class="o">=</span> <span class="n">RSA</span><span class="p">.</span><span class="n">construct</span><span class="p">((</span><span class="n">N</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span>
<span class="n">public_key</span> <span class="o">=</span> <span class="n">private_key</span><span class="p">.</span><span class="n">publickey</span><span class="p">()</span>

<span class="c1"># base64-encode parameters in big-endian format
</span><span class="n">EXP</span> <span class="o">=</span> <span class="n">b64_enc</span><span class="p">(</span><span class="n">public_key</span><span class="p">.</span><span class="n">e</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">MODULUS</span> <span class="o">=</span> <span class="n">b64_enc</span><span class="p">(</span><span class="n">public_key</span><span class="p">.</span><span class="n">n</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'EXP:'</span><span class="p">,</span> <span class="n">EXP</span><span class="p">,</span> <span class="s">'MODULUS:'</span><span class="p">,</span> <span class="n">MODULUS</span><span class="p">)</span>

<span class="c1"># Output:
# EXP: b'AQAB' MODULUS: b'zf4LgceVPvjMLz/pp8exH58AeBrhjLe0k4FRmd59I0k4sH6oug6Z9RfY4FvEFcssBwH1cmWF5/Zen8xbRVRyUnzer6b6cKmlzHFYf0LlbovvYMkW5pdhRcTHK2ijByGtmVgU/CEKEQTy3elpU7ZsHE8D6T1M7L2gmGAxvgldUMRu4l8BPuRyht1a9dA9b6005atpdlkCSc3emXSfyBOBwNE0UicVTVncn9SBjP7bTBGgOKshYnYsqh4BD0I7AU3xdoAsZVWudECX/zVa7uUOk1ooVYjMEyfBngrEDXrmIkAlVruUuj/eWiYwT2vXqByQgDfDvat5IS4i3ywiHAWXUQ=='
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>In <strong>.NET</strong> (I used <strong>C#</strong>), there will be something like this:</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Security.Cryptography</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">RSACryptoApp</span>
<span class="p">{</span>
    <span class="c1">// parameters from the python script (public key)</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">String</span> <span class="n">EXP</span> <span class="p">=</span> <span class="s">"AQAB"</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">String</span> <span class="n">MODULUS</span> <span class="p">=</span> <span class="s">"zf4LgceVPvjMLz/pp8exH58AeBrhjLe0k4FRmd59I0k4sH6oug6Z9RfY4FvEFcssBwH1cmWF5/Zen8xbRVRyUnzer6b6cKmlzHFYf0LlbovvYMkW5pdhRcTHK2ijByGtmVgU/CEKEQTy3elpU7ZsHE8D6T1M7L2gmGAxvgldUMRu4l8BPuRyht1a9dA9b6005atpdlkCSc3emXSfyBOBwNE0UicVTVncn9SBjP7bTBGgOKshYnYsqh4BD0I7AU3xdoAsZVWudECX/zVa7uUOk1ooVYjMEyfBngrEDXrmIkAlVruUuj/eWiYwT2vXqByQgDfDvat5IS4i3ywiHAWXUQ=="</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="n">RSACryptoServiceProvider</span> <span class="n">csp</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RSACryptoServiceProvider</span><span class="p">(</span><span class="m">2048</span><span class="p">);</span>
       <span class="n">csp</span><span class="p">.</span><span class="nf">FromXmlString</span><span class="p">(</span><span class="s">"&lt;RSAKeyValue&gt;&lt;Exponent&gt;"</span> <span class="p">+</span> <span class="n">EXP</span> <span class="p">+</span> <span class="s">"&lt;/Exponent&gt;&lt;Modulus&gt;"</span> <span class="p">+</span> <span class="n">MODULUS</span> <span class="p">+</span> <span class="s">"&lt;/Modulus&gt;&lt;/RSAKeyValue&gt;"</span><span class="p">);</span>

       <span class="c1">// encrypting a string for testing purposes</span>
       <span class="kt">byte</span><span class="p">[]</span> <span class="n">plainText</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="s">"Hello from .NET"</span><span class="p">);</span>
       <span class="kt">byte</span><span class="p">[]</span> <span class="n">cipherText</span> <span class="p">=</span> <span class="n">csp</span><span class="p">.</span><span class="nf">Encrypt</span><span class="p">(</span><span class="n">plainText</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>

       <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Encrypted: "</span> <span class="p">+</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToBase64String</span><span class="p">(</span><span class="n">cipherText</span><span class="p">));</span>

       <span class="c1">// Output:</span>
       <span class="c1">// Encrypted: F/agXpfSrs7HSXZz+jVq5no/xyQDXuOiVAG/MOY7WzSlp14vMOTM8TshFiWtegB3+2BZCMOEPLQFFFbxusuCFOYGGJ8yRaV7q985z/UDJVXvbX5ANYqrirobR+c868mY4V33loAt2ZFNXwr+Ubk11my1aJgHmoBem/6yPfoRd9GrZaSQnbJRSa3EDtP+8pXETkF9B98E7KvElrsRTLXEXSBygmeKsyENo5DDcARW+lVVsQuP8wUEGnth9SX4oG8i++gmQKkrv0ep6yFrn05xZJKgpOfRiTTo/Bkh7FxNP2wo7utzhtYkNnvtXaJPWAvqXg93KmNPqg1IsN4P1Swb8w==</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Back to the <strong>python</strong> script:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="n">cipher</span> <span class="o">=</span> <span class="n">PKCS1_v1_5</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">private_key</span><span class="p">)</span>

<span class="n">random_generator</span> <span class="o">=</span> <span class="n">Random</span><span class="p">.</span><span class="n">new</span><span class="p">().</span><span class="n">read</span>
<span class="n">sentinel</span> <span class="o">=</span> <span class="n">random_generator</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>

<span class="n">cipher_text</span> <span class="o">=</span> <span class="s">'F/agXpfSrs7HSXZz+jVq5no/xyQDXuOiVAG/MOY7WzSlp14vMOTM8TshFiWtegB3+2BZCMOEPLQFFFbxusuCFOYGGJ8yRaV7q985z/UDJVXvbX5ANYqrirobR+c868mY4V33loAt2ZFNXwr+Ubk11my1aJgHmoBem/6yPfoRd9GrZaSQnbJRSa3EDtP+8pXETkF9B98E7KvElrsRTLXEXSBygmeKsyENo5DDcARW+lVVsQuP8wUEGnth9SX4oG8i++gmQKkrv0ep6yFrn05xZJKgpOfRiTTo/Bkh7FxNP2wo7utzhtYkNnvtXaJPWAvqXg93KmNPqg1IsN4P1Swb8w=='</span>

<span class="n">plain_text</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">cipher_text</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'ASCII'</span><span class="p">)),</span> <span class="n">sentinel</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'Decrypted:'</span><span class="p">,</span> <span class="n">plain_text</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="s">'ASCII'</span><span class="p">))</span>

<span class="c1"># Output:
# Decrypted: Hello from .NET
</span></pre></td></tr></tbody></table></code></pre></div></div>

:ET