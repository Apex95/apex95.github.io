I"u<p>Okay, this is a really short article, but I felt the need to write this because too many people seem to take the wrong way.</p>

<h2 id="problem">Problem</h2>

<p>First: getting the <strong>public IP</strong> address of a machine shouldn’t be done locally (<strong>Dns.GetHostAddresses(Dns.GetHostName())</strong> &lt;- this is evil).</p>

<p><em>Why?</em></p>

<p>This method is good only if you need the local IP address. If you need the public one consider that not every machine is <strong>directly</strong> connected to the internet. Some might be sitting behind a <strong>firewall</strong> or a <strong>router</strong>, but the framework won’t know it and will return an address which is valid only inside your network. In order to get the public IP address, which allows computers from the internet to communicate with you, you need to query some entity from outside your network.</p>

<h2 id="solution">Solution</h2>

<p>One reliable way to solve this is to ask a <strong>website</strong> what’s your external IP address - there are many websites that can be used for this and some of them will even return your IP address as a plain text - which is nice.</p>

<p>Here’s a short example of how you should do it (don’t forget to include <strong>System.Net</strong>):</p>

<ul>
  <li>this snippet should only give you the idea of how to do this, don’t use it as it is.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kt">string</span> <span class="nf">getExternalIP</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="p">(</span><span class="n">WebClient</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WebClient</span><span class="p">())</span>
    <span class="p">{</span>
         <span class="k">return</span> <span class="n">client</span><span class="p">.</span><span class="nf">DownloadString</span><span class="p">(</span><span class="s">"http://canihazip.com/s"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><em>What if the website is <strong>down</strong>?</em></p>

<p>Well, this is a risk that can be avoided by using…more websites :) and a bunch of <strong>try-catch</strong> blocks. If a website can’t be reached, we query the next one. Simple as that.</p>

<p>A more reliable example here:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre><span class="kt">string</span> <span class="nf">getExternalIP</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="p">(</span><span class="n">WebClient</span> <span class="n">client</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WebClient</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">client</span><span class="p">.</span><span class="nf">DownloadString</span><span class="p">(</span><span class="s">"http://canihazip.com/s"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">WebException</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// this one is offline</span>
        <span class="p">}</span>

        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">client</span><span class="p">.</span><span class="nf">DownloadString</span><span class="p">(</span><span class="s">"http://wtfismyip.com/text"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">WebException</span> <span class="n">e</span><span class="p">)</span> 
        <span class="p">{</span>  
            <span class="c1">// offline...</span>
        <span class="p">}</span>

        <span class="k">try</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">client</span><span class="p">.</span><span class="nf">DownloadString</span><span class="p">(</span><span class="s">"http://ip.telize.com/"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span> <span class="p">(</span><span class="n">WebException</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// offline too...</span>
        <span class="p">}</span>

        <span class="c1">// if we got here, all the websites are down, which is unlikely</span>
        <span class="k">return</span> <span class="s">"Check internet connection?"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>It can still be improved by doing all the connections at the same time (putting each one in a different thread) - this will reduce the waiting time (if the first websites are down).</p>

<p>However these modifications would exceed the purpose of the article.</p>
:ET