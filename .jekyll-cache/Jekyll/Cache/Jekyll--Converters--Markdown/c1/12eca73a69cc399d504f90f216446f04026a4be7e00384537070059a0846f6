I"@1<p>If you got here, you probably want to know how to make a simple server in C#, using the shortest possible code and the easiest method to understand.</p>

<p>For the sake of simplicity we’ll make a <strong>synchronous server</strong> using a <strong>Console Application</strong> project, so we don’t need to use multithreading or anything else.</p>

<h5 id="its-recommended-to-use-a-console-application-with-this-code-because-this-code-is-considered-thread-blocker---if-you-use-it-in-a-form-project-you-wont-be-able-to-moveclose-the-form-while-the-server-is-running">It’s recommended to use a Console Application with this code, because this code is considered ‘thread-blocker’ - if you use it in a Form project, you won’t be able to move/close the form while the server is running.</h5>

<p>I’ll post now the code of the TCP server and I’ll explain below how it works:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">using</span> <span class="nn">System.Net</span><span class="p">;</span>      <span class="c1">//required
</span>
<span class="k">using</span> <span class="nn">System.Net.Sockets</span><span class="p">;</span>    <span class="c1">//required
</span>

<span class="k">namespace</span> <span class="nn">ServerTest</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">TcpListener</span> <span class="n">server</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TcpListener</span><span class="p">(</span><span class="n">IPAddress</span><span class="p">.</span><span class="n">Any</span><span class="p">,</span> <span class="m">9999</span><span class="p">);</span>  
           <span class="c1">// we set our IP address as server's address, and we also set the port: 9999
</span>

            <span class="n">server</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>  <span class="c1">// this will start the server
</span>

            <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>   <span class="c1">//we wait for a connection
</span>
            <span class="p">{</span>
                <span class="n">TcpClient</span> <span class="n">client</span> <span class="p">=</span> <span class="n">server</span><span class="p">.</span><span class="nf">AcceptTcpClient</span><span class="p">();</span>  <span class="c1">//if a connection exists, the server will accept it
</span>

                <span class="n">NetworkStream</span> <span class="n">ns</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">GetStream</span><span class="p">();</span> <span class="c1">//networkstream is used to send/receive messages
</span>

                <span class="kt">byte</span><span class="p">[]</span> <span class="n">hello</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="m">100</span><span class="p">];</span>   <span class="c1">//any message must be serialized (converted to byte array)
</span>
                <span class="n">hello</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="s">"hello world"</span><span class="p">);</span>  <span class="c1">//conversion string =&gt; byte array
</span>

                <span class="n">ns</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="n">hello</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">hello</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>     <span class="c1">//sending the message
</span>

                <span class="k">while</span> <span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">Connected</span><span class="p">)</span>  <span class="c1">//while the client is connected, we look for incoming messages
</span>
                <span class="p">{</span>
                    <span class="kt">byte</span><span class="p">[]</span> <span class="n">msg</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="m">1024</span><span class="p">];</span>     <span class="c1">//the messages arrive as byte array
</span>
                    <span class="n">ns</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">msg</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>   <span class="c1">//the same networkstream reads the message sent by the client
</span>
                    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">encoder</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">msg</span><span class="p">).</span><span class="nf">Trim</span><span class="p">(</span><span class="err">''</span><span class="p">));</span> <span class="c1">//now , we write the message as string
</span>
                <span class="p">}</span>
            <span class="p">}</span>

        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p> </p>

<p><strong>How it works?</strong></p>
<ul>
  <li>it’s a good idea to take a look on the code up there, while you read this</li>
</ul>

<p>1. We include the namespaces <strong>System.Net</strong> and <strong>System.Net.Sockets</strong> because we need some types/methods from there.</p>

<p>2. Now, we create the server: the following line is used to create a <strong>TcpListener</strong> (which is our server), that will check for any incoming connection, on any IP address on the port <strong>9999</strong>.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">TcpListener</span> <span class="n">server</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TcpListener</span><span class="p">(</span><span class="n">IPAddress</span><span class="p">.</span><span class="n">Any</span><span class="p">,</span> <span class="m">9999</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>3. Ok, we have the server but it’s not doing anything. So, we’ll make him accept connections from a Tcp Client:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
<span class="p">{</span>
       <span class="n">TcpClient</span> <span class="n">client</span> <span class="p">=</span> <span class="n">server</span><span class="p">.</span><span class="nf">AcceptTcpClient</span><span class="p">();</span>
       <span class="p">...</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>4. After the client connects, the server will send using the <strong>NetworkStream.</strong> a ‘hello’ message. Because we can’t directly send/receive strings, we have to transform our messange into a <strong>byte array</strong>.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">Encoding</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="s">"hello world"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>After the message is converted, it can be sent:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">NetworkStream</span> <span class="n">ns</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">GetStream</span><span class="p">();</span>
<span class="n">ns</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="n">hello</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">hello</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>5. The last part consists in reading the messages received from the client.<br />
Any incoming message is read using the same <strong>NetworkStream</strong>.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">NetworkStream</span> <span class="n">ns</span> <span class="p">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">GetStream</span><span class="p">();</span>  
<span class="n">ns</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">msg</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Finally we transform it into a string, using the same encoding.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">Encoding</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p> 
 </p>

<h2 id="this-server-accepts-only-one-clientwhy">This server accepts only one client…Why?</h2>

<p>Well… if we take a closer look into the source we can easily see the problem, but I’ll explain for a better understanding:</p>

<p>We have the <strong>tcp client</strong> which connects to our <strong>server</strong> and sends data. While <strong>client.Connected</strong> returns <strong>true</strong> the server will be ‘blocked’ waiting for new messages, and won’t check/accept a new Tcp Client. This is usually solved using a different <strong>thread</strong> for every client connected or simply using an <strong>asynchronous server</strong> but those methods are not ideal for this kind of tutorial.</p>

<p>Take a look at <a href="https://codingvision.net/networking/c-asynchronous-tcp-server">how to code an asynchronous tcp server</a> if you’re interested in a version which accepts <strong>multiple clients</strong>.</p>

<p>If you don’t have a client to connect to the server, you can use Telnet, available on any Windows System: go to <strong>Command Prompt</strong> and type: <strong>telnet 127.0.0.1 9999</strong>.</p>
:ET