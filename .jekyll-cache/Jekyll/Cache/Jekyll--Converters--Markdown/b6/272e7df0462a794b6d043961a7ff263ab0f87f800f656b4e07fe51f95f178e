I"~'<h2 id="1-removing-the-title-bar-and-border">1. Removing the title bar and border</h2>

<p>In this tutorial I will show you how you can make a draggable window (<strong>Form</strong>) with no <strong>title bar</strong> or <strong>border</strong>. By default, when you remove the border of a Form, you can’t move or drag it anymore and this behavior must be implemented separately.</p>

<p>I assume you already have the program ready - at least the design part, so I’ll skip to what interests you. :D</p>

<p>Initially, set in the <strong>Properties Window</strong>:<br />
<strong>FormBorderStyle</strong> : <strong>None</strong></p>

<h2 id="2-getting-a-movable-window">2. Getting a movable window</h2>

<p>This will hide the title bar and window’s border. But if we remove that <strong>title bar</strong>, we can not move the window on the screen anymore - just because the title bar handles the window’s movement.</p>

<p>To move the window, we have to use some <strong>WinAPI</strong> . Don’t worry if you don’t know WinAPI very well, it’s not a long code - so no special knowledge is required .</p>

<p>We’ll include in the program:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">System.Runtime.InteropServices</span><span class="p">;</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>After that, two methods must be imported from <strong>user32.dll</strong> :<br />
<strong>SendMessage()</strong><br />
<strong>ReleaseCapture();</strong></p>

<p>To do this, we’ll add the following code to the program</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="p">[</span><span class="nf">DllImportAttribute</span><span class="p">(</span><span class="s">"user32.dll"</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">int</span> <span class="nf">SendMessage</span><span class="p">(</span><span class="n">IntPtr</span> <span class="n">hWnd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">Msg</span><span class="p">,</span> <span class="kt">int</span> <span class="n">wParam</span><span class="p">,</span> <span class="kt">int</span> <span class="n">LPAR</span><span class="p">);</span>
<span class="p">[</span><span class="nf">DllImportAttribute</span> <span class="p">(</span><span class="s">"user32.dll"</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">bool</span> <span class="nf">ReleaseCapture</span><span class="p">();</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>What is this doing? It imports 2 methods from <strong>user32.dll</strong>:</p>
<ul>
  <li>the first one (<strong>SendMessage()</strong>) checks if the mouse button is clicked, and then sends a message to our program, notifying the window to change it’s position acording to our cursor</li>
  <li>the second method (<strong>ReleaseCapture()</strong>) releases the mouse capture from our window.</li>
</ul>

<p>Using them both, we can make a method that when called, moves the window to our cursor position - acts exactly like a title bar. However we’ll have to bind this method to the <strong>MouseDown</strong> event of the <strong>Form</strong>.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="k">const</span> <span class="kt">int</span> <span class="n">WM_NCLBUTTONDOWN</span> <span class="p">=</span> <span class="m">0xA1</span><span class="p">;</span> 
<span class="k">const</span> <span class="kt">int</span> <span class="n">HT_CAPTION</span> <span class="p">=</span> <span class="m">0x2</span><span class="p">;</span>  <span class="c1">//this indicates that the action takes place on the title bar
</span>

<span class="k">private</span> <span class="k">void</span> <span class="nf">move_window</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseEventArgs</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Button</span> <span class="p">==</span> <span class="n">MouseButtons</span><span class="p">.</span><span class="n">Left</span><span class="p">)</span>
        <span class="p">{</span>
               <span class="nf">ReleaseCapture</span><span class="p">();</span>
               <span class="nf">SendMessage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">Handle</span><span class="p">,</span> <span class="n">WM_NCLBUTTONDOWN</span><span class="p">,</span> <span class="n">HT_CAPTION</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
        <span class="p">}</span>
<span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>

<p>Now you just have to attach this method to the <strong>MouseDown</strong> event of the Form. You can do this from the Properties Window or, using the following code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="k">this</span><span class="p">.</span><span class="n">MouseDown</span> <span class="p">+=</span> <span class="k">new</span> <span class="nf">MouseEventHandler</span><span class="p">(</span><span class="n">move_window</span><span class="p">);</span>
<span class="c1">//any form has a MouseDown event, we use it to call the function</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>In the end, you get (or should get) something like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">Form1</span><span class="p">:</span> <span class="n">Form</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">DllImportAttribute</span><span class="p">(</span><span class="s">"user32.dll"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">int</span> <span class="nf">SendMessage</span><span class="p">(</span><span class="n">IntPtr</span> <span class="n">hWnd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">Msg</span><span class="p">,</span> <span class="kt">int</span> <span class="n">wParam</span><span class="p">,</span> <span class="kt">int</span> <span class="n">LPAR</span><span class="p">);</span>
    <span class="p">[</span><span class="nf">DllImportAttribute</span> <span class="p">(</span><span class="s">"user32.dll"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">extern</span> <span class="kt">bool</span> <span class="nf">ReleaseCapture</span><span class="p">();</span>

    <span class="k">const</span> <span class="kt">int</span> <span class="n">WM_NCLBUTTONDOWN</span> <span class="p">=</span> <span class="m">0xA1</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">HT_CAPTION</span> <span class="p">=</span> <span class="m">0x2</span><span class="p">;</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">move_window</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseEventArgs</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Button</span> <span class="p">==</span> <span class="n">MouseButtons</span><span class="p">.</span><span class="n">Left</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nf">ReleaseCapture</span><span class="p">();</span>
            <span class="nf">SendMessage</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">Handle</span><span class="p">,</span> <span class="n">WM_NCLBUTTONDOWN</span><span class="p">,</span> <span class="n">HT_CAPTION</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Form1</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="c1">// If you haven't set FormBorderStyle = none from the properties window, just uncomment the line below           
</span>
        <span class="c1">// FormBorderStyle = FormBorderStyle.None;
</span>

        <span class="k">this</span><span class="p">.</span><span class="n">MouseDown</span> <span class="p">+=</span> <span class="k">new</span> <span class="nf">MouseEventHandler</span><span class="p">(</span><span class="n">move_window</span><span class="p">);</span> <span class="c1">// binding the method to the event
</span>

        <span class="nf">InitializeComponent</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span> 
</pre></td></tr></tbody></table></code></pre></figure>
:ET