I"D(<ul class="post-list">
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/minecraft.webp " alt="C# Minecraft Pixel Art Generator" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-minecraft-pixel-art-generator">C# Minecraft Pixel Art Generator</a>
        </h2>
        
        <p class="excerpt">
            Good morning class, (see what I did there:P ?) Today we will discuss a very important subject: creating pixel art in Minecraft from a given image.     Ok guys, so I saw people creating pixel art in Minecraft (trying...
        </p>
        
        <p class="post-meta">Aug 28, 2015</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/dllInject.webp " alt="C# Inject a Dll into a Process (w/ CreateRemoteThread)" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-inject-a-dll-into-a-process-w-createremotethread">C# Inject a Dll into a Process (w/ CreateRemoteThread)</a>
        </h2>
        
        <p class="excerpt">
            Since I’ve been asked if this is possible - well…you can do Dll Injection using C# but the injected Dll must be written in a language that doesn’t depend on a CLR (C/C++ would be a good option here, but...
        </p>
        
        <p class="post-meta">Oct 14, 2014</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/backpropagation.webp " alt="C# Backpropagation Tutorial (XOR)" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-backpropagation-tutorial-xor">C# Backpropagation Tutorial (XOR)</a>
        </h2>
        
        <p class="excerpt">
            I’ve been trying for some time to learn and actually understand how Backpropagation (aka backward propagation of errors) works and how it trains the neural networks. Since I encountered many problems while creating the program, I decided to write this...
        </p>
        
        <p class="post-meta">Jun 14, 2013</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/desktopSS.webp " alt="C# Get Desktop Screenshot" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-get-desktop-screenshot">C# Get Desktop Screenshot</a>
        </h2>
        
        <p class="excerpt">
            I found this feature while looking inside Graphics class and since it was so simple to use, I decided to post it here. It basically allows you to take print screens programmatically and save them as local images or forward...
        </p>
        
        <p class="post-meta">May 21, 2013</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/protocolArgument.webp " alt="C# Register a Url Protocol" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-register-a-url-protocol">C# Register a Url Protocol</a>
        </h2>
        
        <p class="excerpt">
            This tutorial will show you how to register a custom Url Protocol for your application. Basically, you can control your application by simply clicking an Url address like this one: myApp:doSomething In this tutorial, I’ll name the custom protocol myApp...
        </p>
        
        <p class="post-meta">Mar 22, 2013</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
    
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/snowflake.webp " alt="C# Falling Snowflakes on Desktop" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-falling-snowflakes-on-desktop">C# Falling Snowflakes on Desktop</a>
        </h2>
        
        <p class="excerpt">
            Since it’s winter, I decided to write about how to create an application that makes snowflakes fall on your desktop. It’s just like snowing on your desktop, but the application is pretty basic so there’s space for improvements - I...
        </p>
        
        <p class="post-meta">Dec 29, 2012</p>
      </li>
      <hr class="separator" />
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/sendtext.webp " alt="C# Send Text to Notepad" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-send-text-to-notepad">C# Send Text to Notepad</a>
        </h2>
        
        <p class="excerpt">
            This tutorial focuses on sending text from a C# program to any other window by using 2 functions provided by user32.dll. The big advantage of this method is that the window you’re sending the text to doesn’t require focus. Don’t...
        </p>
        
        <p class="post-meta">Dec 9, 2012</p>
      </li>
      <hr class="separator" />
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/registry.webp " alt="C# Edit Registry Keys or Values" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-edit-registry-keys-or-values">C# Edit Registry Keys or Values</a>
        </h2>
        
        <p class="excerpt">
            First Before starting to edit registry values/keys, include in your project’s source this namespace Microsoft.Win32. It will give you access to the required Registry functions. So, make sure you add this: 1 using Microsoft.Win32; In order to edit anything, you...
        </p>
        
        <p class="post-meta">Nov 11, 2012</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
    
    
    
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/perceptron.webp " alt="C# Perceptron Tutorial" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-perceptron-tutorial">C# Perceptron Tutorial</a>
        </h2>
        
        <p class="excerpt">
            Intro The Perceptron is basically the simplest learning algorithm, that uses only one neuron. An usual representation of a perceptron (neuron) that has 2 inputs looks like this: A 2 Inputs + Bias Perceptron Now for a better understanding: Input...
        </p>
        
        <p class="post-meta">Sep 16, 2012</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
    
    
    
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/compileRuntime.webp " alt="C# Compile at Runtime" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-compile-at-runtime">C# Compile at Runtime</a>
        </h2>
        
        <p class="excerpt">
            To our luck, .NET Framework contains some classes that allow us to access the compiler and with it, we can compile our code at runtime. Basically when our executable will run, it will compile a small piece of code stored...
        </p>
        
        <p class="post-meta">Aug 5, 2012</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/libraryRuntime.webp " alt="C# Load dll at Runtime" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-load-dll-at-runtime">C# Load dll at Runtime</a>
        </h2>
        
        <p class="excerpt">
            This is a method used to import a dll during the program’s execution (at the runtime) without adding the actual library as a reference. Obviously, you will need: A DLL made in C# - only a function and a class...
        </p>
        
        <p class="post-meta">Jun 23, 2012</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/timer1.webp " alt="C# Countdown Timer" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-countdown-timer">C# Countdown Timer</a>
        </h2>
        
        <p class="excerpt">
            A timer in C # is an object that executes an action after a specified time interval - for example, it can call a method every 5 seconds. The best way to understand how it works is to use it...
        </p>
        
        <p class="post-meta">Jun 15, 2012</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
    
    
    
    
    
    
    
    
      <li>
        <div class="thumbnail"><img src="/imgs/thumbnails/no_thumbnail.png" data-echo=" /imgs/thumbnails/connectMysql.webp " alt="C# Connect to MySql" /></div>
        <h2 style="border:none;">
          <a class="post-link" href="/miscellaneous/c-connect-to-mysql">C# Connect to MySql</a>
        </h2>
        
        <p class="excerpt">
            MsSql or MySql ? What to use ? I prefer MySql because I work with it more often. Unfortunately .NET doesn’t support by default this kind of database… There’s a solution! It’s a small library called Connector/NET, available on MySql’s...
        </p>
        
        <p class="post-meta">May 2, 2012</p>
      </li>
      <hr class="separator" />
    
    
    
    
    
    
    
    
    
    
    
    
  </ul>
:ET