I"Æ4<p>In this short tutorial Iâ€™ll explain how to make a simple <strong>Http Server</strong> using only C#. The server will be able to serve any page that contains <strong>client-side</strong> code (html and javascript).</p>

<h2 id="basic-stuff">Basic stuff</h2>

<p>When a client requests a page of a website (letâ€™s say index.html), the <strong>Http Server</strong> will start looking for that file. If the file is found, the server will read all the content and send it back to the client as a <strong>byte array</strong>. After this, the connection is closed.</p>

<h2 id="the-coding-part">The coding part</h2>

<p>Before starting, you need to change your projectâ€™s profile to <strong>.NET Framework 4</strong> (not .NET Framework 4 client profile). This can be done by going to <em>Project-&gt;Project properties-&gt;Application</em>.</p>

<p>Now, go to <em>Solution Explorer-&gt;References-&gt;Add Reference-&gt;.NET</em> and import <strong>System.Web</strong> .<br />
Also make sure you have the following lines included in your projectâ€™s header:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Creating the server is quite simple - weâ€™ll use .NETâ€™s <strong>HttpListener</strong>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="n">HttpListener</span> <span class="n">server</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpListener</span><span class="p">();</span>  <span class="c1">// this is the http server
</span>
<span class="n">server</span><span class="p">.</span><span class="n">Prefixes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"http://127.0.0.1/"</span><span class="p">);</span>  <span class="c1">//we set a listening address here (localhost)
</span>
<span class="n">server</span><span class="p">.</span><span class="n">Prefixes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"http://localhost/"</span><span class="p">);</span>

<span class="n">server</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>   <span class="c1">// and start the server</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The server is made, now we need to identify incoming connections and serve the requested files. For each connection, we send only one file and because we might have multiple connections, weâ€™ll need an endless loop to handle them one by one.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
<span class="p">{</span>
          <span class="n">HttpListenerContext</span> <span class="n">context</span> <span class="p">=</span> <span class="n">server</span><span class="p">.</span><span class="nf">GetContext</span><span class="p">();</span>  
          <span class="c1">//context: provides access to httplistener's response
</span>

          <span class="n">HttpListenerResponse</span> <span class="n">response</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">;</span> 
         <span class="c1">//the response tells the server where to send the datas
</span>

          <span class="kt">string</span> <span class="n">page</span> <span class="p">=</span> <span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">()</span> <span class="p">+</span> <span class="n">context</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Url</span><span class="p">.</span><span class="n">LocalPath</span><span class="p">;</span>
          <span class="c1">//this will get the page requested by the browser 
</span>

          <span class="k">if</span> <span class="p">(</span><span class="n">page</span> <span class="p">==</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>  <span class="c1">//if there's no page, we'll say it's index.html
</span>
              <span class="n">page</span> <span class="p">=</span> <span class="s">"index.html"</span><span class="p">;</span> 

          <span class="n">TextReader</span> <span class="n">tr</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StreamReader</span><span class="p">(</span><span class="n">page</span><span class="p">);</span>  
          <span class="kt">string</span> <span class="n">msg</span> <span class="p">=</span> <span class="n">tr</span><span class="p">.</span><span class="nf">ReadToEnd</span><span class="p">();</span>  <span class="c1">//getting the page's content
</span>

          <span class="kt">byte</span><span class="p">[]</span> <span class="n">buffer</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>   
          <span class="c1">//then we transform it into a byte array
</span>

          <span class="n">response</span><span class="p">.</span><span class="n">ContentLength64</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>  <span class="c1">// set up the messasge's length
</span>
          <span class="n">Stream</span> <span class="n">st</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">OutputStream</span><span class="p">;</span>  <span class="c1">// here we create a stream to send the message
</span>
          <span class="n">st</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">buffer</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span> <span class="c1">// and this will send all the content to the browser
</span>

          <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span>  <span class="c1">// here we close the connection
</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Well, this is all, now all you need to do is to create some html pages and place them into your executableâ€™s directory.<br />
Then run the application and access<br />
<strong>http://127.0.0.1/anyfile.html</strong>.</p>

<p>You should be able to see your file in the browserâ€™s window.</p>

<h2 id="the-complete-code">The complete code</h2>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
</pre></td><td class="code"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">test</span>
<span class="p">{</span>

    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">HttpListener</span> <span class="n">server</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpListener</span><span class="p">();</span>
            <span class="n">server</span><span class="p">.</span><span class="n">Prefixes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"http://127.0.0.1/"</span><span class="p">);</span>
            <span class="n">server</span><span class="p">.</span><span class="n">Prefixes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"http://localhost/"</span><span class="p">);</span>

            <span class="n">server</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>

            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Listening..."</span><span class="p">);</span>

            <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">HttpListenerContext</span> <span class="n">context</span> <span class="p">=</span> <span class="n">server</span><span class="p">.</span><span class="nf">GetContext</span><span class="p">();</span>
                <span class="n">HttpListenerResponse</span> <span class="n">response</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">;</span>

                <span class="kt">string</span> <span class="n">page</span> <span class="p">=</span> <span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">()</span> <span class="p">+</span> <span class="n">context</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Url</span><span class="p">.</span><span class="n">LocalPath</span><span class="p">;</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">page</span> <span class="p">==</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>
                    <span class="n">page</span> <span class="p">=</span> <span class="s">"index.html"</span><span class="p">;</span>

                <span class="n">TextReader</span> <span class="n">tr</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StreamReader</span><span class="p">(</span><span class="n">page</span><span class="p">);</span>
                <span class="kt">string</span> <span class="n">msg</span> <span class="p">=</span> <span class="n">tr</span><span class="p">.</span><span class="nf">ReadToEnd</span><span class="p">();</span>

                <span class="kt">byte</span><span class="p">[]</span> <span class="n">buffer</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>

                <span class="n">response</span><span class="p">.</span><span class="n">ContentLength64</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
                <span class="n">Stream</span> <span class="n">st</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">OutputStream</span><span class="p">;</span>
                <span class="n">st</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">buffer</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>

                <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span>
            <span class="p">}</span>

        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Remember that this server isnâ€™t able to parse server-side languages like PHP or ASP.NET, it just sends the fileâ€™s content to the browser. If youâ€™re interested in embedding ASP.NET into a http server <a href="http://www.codingvision.net/networking/c-http-server-with-aspnet/">see this tutorial</a>.</p>
:ET