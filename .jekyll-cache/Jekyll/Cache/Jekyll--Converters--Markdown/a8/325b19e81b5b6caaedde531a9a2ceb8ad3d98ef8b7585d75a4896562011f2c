I"d<p><strong>Data Protection API</strong> aka <strong>DPAPI</strong> is a neat service provided by Windows Operating Systems (newer than Windows 2000) that safely encrypts and decrypts user credentials, using the <strong>Triple-DES</strong> algorithm.</p>

<p>You have to supply the data as <strong>byte array</strong> in order to be encrypted / decrypted.</p>

<h5 id="dpapi-uses-the-users-key-to-encrypt--decrypt-so-anyone-who-has-access-to-your-account-can-see-the-original-data-unless-you-define-an-entropy---see-below-what-that-is">DPAPI uses the userâ€™s key to encrypt / decrypt so anyone who has access to your account can see the original data unless you define an <strong>Entropy</strong> - see below what that is.</h5>

<h2 id="1what-is-needed">1.What is needed</h2>

<p>Before starting, <strong>add a reference</strong> to <strong>System.Security.dll</strong>, and include this line in your project:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">using</span> <span class="nn">System.Security.Cryptography</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>For increased security, you can choose an <strong>Entropy</strong> (which is an additional byte array) to make the encryption safer - this way, users that have access to your Windows account must also know the Entropy used.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="k">readonly</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">entropy</span> <span class="p">=</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">6</span> <span class="p">};</span> <span class="c1">//the entropy</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="2encryption">2.Encryption</h2>

<p>One of the functions that come with DPAPI is <strong>Protect()</strong>, that has 3 arguments. It returns an encrypted version of the message you provide.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="k">private</span> <span class="kt">string</span> <span class="nf">Encrypt</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span> 
<span class="p">{</span> 
    <span class="c1">// first, convert the text to byte array </span>
    <span class="kt">byte</span><span class="p">[]</span> <span class="n">originalText</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">text</span><span class="p">);</span> 
    
    <span class="c1">// then use Protect() to encrypt your data </span>
    <span class="kt">byte</span><span class="p">[]</span> <span class="n">encryptedText</span> <span class="p">=</span> <span class="n">ProtectedData</span><span class="p">.</span><span class="nf">Protect</span><span class="p">(</span><span class="n">originalText</span><span class="p">,</span> <span class="n">entropy</span><span class="p">,</span> <span class="n">DataProtectionScope</span><span class="p">.</span><span class="n">CurrentUser</span><span class="p">);</span> 
    
    <span class="c1">//and return the encrypted message </span>
    <span class="k">return</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToBase64String</span><span class="p">(</span><span class="n">encryptedText</span><span class="p">);</span> 
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="3decryption">3.Decryption</h2>

<p>Another function that comes with DPAPI is <strong>Unprotect()</strong>, has 3 parameters and returns the original message, when you supply the encrypted one.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="k">private</span> <span class="kt">string</span> <span class="nf">Decrypt</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span> 
<span class="p">{</span> 
    <span class="c1">// the encrypted text, converted to byte array </span>
    <span class="kt">byte</span><span class="p">[]</span> <span class="n">encryptedText</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">FromBase64String</span><span class="p">(</span><span class="n">text</span><span class="p">);</span> 
    
    <span class="c1">// calling Unprotect() that returns the original text </span>
    <span class="kt">byte</span><span class="p">[]</span> <span class="n">originalText</span> <span class="p">=</span> <span class="n">ProtectedData</span><span class="p">.</span><span class="nf">Unprotect</span><span class="p">(</span><span class="n">encryptedText</span><span class="p">,</span> <span class="n">entropy</span><span class="p">,</span> <span class="n">DataProtectionScope</span><span class="p">.</span><span class="n">CurrentUser</span><span class="p">);</span> 
    
    <span class="c1">// finally, returning the result </span>
    <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">originalText</span><span class="p">);</span> 
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="4errors">4.Errors?</h2>

<p>These methods may throw up errors if you try to decrypt a text using a different user than the one you used for encryption.</p>

<p>You can solve this by using <strong>DataProtectionScope.LocalMachine</strong> instead of <strong>DataProtectionScope.CurrentUser</strong>, this way any user has the possibility to decrypt the message if he knows the Entropy.</p>
:ET